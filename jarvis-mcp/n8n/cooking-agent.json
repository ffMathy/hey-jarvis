{
  "name": "Cooking agent",
  "nodes": [
    {
      "parameters": {
        "inputSource": "jsonExample",
        "jsonExample": "{\n  \"prompt\": \"The prompt for the agent.\"\n}"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -320,
        1072
      ],
      "id": "19986f79-8b60-44ec-b5fa-ca1e17a9f5eb",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -320,
        1296
      ],
      "id": "7e061dba-154f-4e41-985b-18ffac5ff478",
      "name": "When chat message received",
      "webhookId": "WEBHOOK_ID_PLACEHOLDER"
    },
    {
      "parameters": {
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are a cooking agent that will find recipes and ingredients on Valdemarsro (a recipe website) and answer questions regarding these. \n\nValdemarsro is in Danish, so all queries towards the API should have Danish content (such as search terms etc).\n\nDon't make multiple requests for searches with the same search query.\n\nYou will be instructed to do so via an orchestrator agent that will then summarize the response you provide to the end-user. Therefore, present all information as detailed as possible to the parent agent.\n\nAlways respond in the language that the request was made in (Danish or English). If needed, translate the result to the given language. This is very important.\n\nIf the portion size is not given, assume it is for 2 people, but for 2 days (so 4 people).\n\nWhen asked to make cooking plans, always  assume that each meal can last for 3 days.\n\nPrefer not asking questions unless absolutely necessary. Make best-guess assumptions instead.\n\nIf asked to find a recipe, always also return alternatives as well.\n\nIf asked for the ingredients of a recipe, always include quantities of each recipe as well.\n\nReturn as many details as possible (especially around quantitive data), so that the parent agent can decide what to do with all the information. Do not think of summarization - the parent agent will handle that.",
          "maxIterations": 10
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        240,
        1216
      ],
      "id": "cb1f56f8-33d1-4304-b003-ff5f3c6de44e",
      "name": "AI Agent",
      "alwaysOutputData": false,
      "notes": "```\nopenapi: 3.0.0\ninfo:\n  title: Valdemarsro Recipe API\n  version: 1.0.0\n  description: >\n    OpenAPI specification for endpoints related to fetching recipes.\n    Endpoints that require a request body (e.g. search criteria) are defined as POST requests.\n    Note: The search endpoint returns a field named **post_id**. This value is the unique recipe identifier\n    that should be supplied as the **recipeId** parameter when calling the **/recipes/{recipeId}** endpoint.\nservers:\n  - url: https://www.valdemarsro.dk/api/v2/\npaths:\n  /recipes/page/{page}:\n    get:\n      summary: Get all recipes (paginated)\n      parameters:\n        - name: page\n          in: path\n          description: The page number to retrieve.\n          required: true\n          schema:\n            type: integer\n        - name: fromdate\n          in: query\n          description: Filter recipes from a specific date.\n          required: false\n          schema:\n            type: string\n        - name: r\n          in: query\n          description: Additional filtering or sorting parameter.\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A paginated list of recipes.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetAllRecipesResponse'\n  /recipes/{recipeId}:\n    get:\n      summary: Get recipe details\n      parameters:\n        - name: recipeId\n          in: path\n          description: >\n            The unique identifier of the recipe.\n            **Important:** Use the **post_id** value returned in the search response here.\n            Do not confuse it with a field named **recipe_id**.\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Recipe details retrieved successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetRecipeResponse'\n  /search/filters:\n    get:\n      summary: Get search filters for recipes\n      responses:\n        '200':\n          description: Search filters retrieved successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetSearchFiltersResponse'\n  /search:\n    post:\n      summary: Search for recipes\n      description: >\n        Search for recipes by providing a JSON request body conforming to the SearchRequestBody schema.\n        Note: The search response contains a field named **post_id** that should be used as the recipe identifier\n        when calling the **/recipes/{recipeId}** endpoint.\n      requestBody:\n        description: Search criteria.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SearchRequestBody'\n      responses:\n        '200':\n          description: Search results retrieved successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchResponse'\ncomponents:\n  schemas:\n    GetAllRecipesResponse:\n      type: object\n      properties: {}\n    GetCategoryResponse:\n      type: object\n      properties: {}\n    MonthlyRecipesResponse:\n      type: object\n      properties: {}\n    GetRecipeResponse:\n      type: object\n      properties: {}\n    GetSearchFiltersResponse:\n      type: object\n      properties: {}\n    SearchResponse:\n      type: object\n      properties:\n        results:\n          type: array\n          description: A list of search result items.\n          items:\n            type: object\n            properties:\n              post_id:\n                type: integer\n                description: >\n                  The unique identifier of the recipe.\n                  **Important:** This value should be used as the **recipeId** when calling **/recipes/{recipeId}**.\n              # Additional properties for a search result can be defined here.\n    SearchRequestBody:\n      type: object\n      properties:\n        search_term:\n          type: string\n          description: The search term.\n        terms:\n          type: array\n          description: A list of search terms.\n          items:\n            type: string\n        ingredients:\n          type: array\n          description: A list of ingredient IDs.\n          items:\n            type: integer\n        favoritesOnly:\n          type: boolean\n          description: Flag to indicate if only favorite recipes should be included.\n```"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "session-cooking"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        320,
        1440
      ],
      "id": "d644b053-7adb-4563-a6df-c72fcc3a59b6",
      "name": "Window Buffer Memory",
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b0e5432e-24b2-487c-913f-f895a46f4b5e",
              "name": "chatInput",
              "value": "={{ $json.prompt }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "include": "selected",
        "includeFields": "sessionId",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -80,
        1072
      ],
      "id": "08c569c5-6f14-4044-baf0-9cce6370d29e",
      "name": "Rename field"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -304,
        1776
      ],
      "id": "38f66e7d-f6ff-4725-acef-8de0e4a73275",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "model": "text-embedding-ada-002",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        704,
        1712
      ],
      "id": "812778ae-68f3-470b-a92a-5f357af956e7",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "OPENAI_CREDENTIAL_ID",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "weeks",
              "triggerAtHour": 6
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -304,
        1968
      ],
      "id": "38c11e3b-7762-4ce7-8f18-bb7c255a3304",
      "name": "Create meal plan weekly"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM n8n.\"cooking-recipes\" WHERE last_used_in_mealplan < CURRENT_DATE - INTERVAL '60 days' OR last_used_in_mealplan IS NULL LIMIT {{ $json.limit || 100000 }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -48,
        1888
      ],
      "id": "4e0bfdd7-b036-4b73-8780-0c0d09918d88",
      "name": "Get all recipes",
      "credentials": {
        "postgres": {
          "id": "POSTGRES_CREDENTIAL_ID",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        672,
        1888
      ],
      "id": "ad835e98-f8f3-4349-88e8-54c99c17e060",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "operation": "sendAndWait",
        "toRecipients": "EMAIL_ADDRESS_1, EMAIL_ADDRESS_2",
        "subject": "Nyt forslag til madplan",
        "message": "={{ $json.output }}",
        "responseType": "customForm",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Forbedringer til madplanen?",
              "fieldType": "textarea",
              "placeholder": "For eksempel \"Mindre kød, sundere, lavere forberedelsestid\""
            }
          ]
        },
        "options": {
          "messageButtonLabel": "Svar",
          "responseFormTitle": "Er madplanen OK?",
          "responseFormButtonLabel": "Indsend",
          "limitWaitTime": {
            "values": {
              "resumeAmount": 14,
              "resumeUnit": "days"
            }
          },
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.microsoftOutlook",
      "typeVersion": 2,
      "position": [
        2240,
        2160
      ],
      "id": "ceefafd1-bf79-45a0-bf34-1d3142a88b30",
      "name": "Send proposal",
      "webhookId": "WEBHOOK_ID_PLACEHOLDER",
      "credentials": {
        "microsoftOutlookOAuth2Api": {
          "id": "OUTLOOK_CREDENTIAL_ID",
          "name": "Microsoft Outlook account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "7bd8be5b-8cb6-4ce2-b107-5328c67b8177",
              "leftValue": "={{ $json.data['Forbedringer til madplanen?'] }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2464,
        2160
      ],
      "id": "e0b8d55b-52b8-45a8-98bb-3ff1d4b7a8b4",
      "name": "Is OK?"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "083faaca-69f7-450d-9ef9-123d28ed80ab",
              "name": "prompt",
              "value": "=# Adjustments to previous meal plan\nThe below adjustments need to be made to this meal plan: \n\n```json\n{{ JSON.stringify($('Combine to list').item.json.data) }}\n```\n\n# Adjustments to original prompt and previous meal plan\nThe following adjustments should take precedence over previous instructions if they are conflicting.\n\nIn Danish: {{ $json.data['Forbedringer til madplanen?'] }}",
              "type": "string"
            },
            {
              "id": "1fb1e96b-6868-4beb-af42-367962557fe5",
              "name": "data",
              "value": "={{ $('Aggregate').item.json.data }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2464,
        2400
      ],
      "id": "93fe2088-2dd4-43e0-ba85-fee720494f58",
      "name": "Redirect adjustments prompt"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "SHOPPING_LIST_WORKFLOW_ID",
          "mode": "list",
          "cachedResultName": "Shopping list agent"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "prompt": "=# Prompt\nAdd the ingredients of this mealplan (in JSON) to the shopping list. Respond with exactly what was added, and what couldn't be found. Respond in Danish, and in HTML.\n\n# Omitted ingredients\nThere are some ingredients that the user never needs. If these are in the mealplan, you can safely ignore these, and assume that they don't need to be added.\n\n- Salt\n- Pepper\n- Sugar\n- Flour\n- Soja (or sojasauce)\n- Hoisin sauce\n- Oils and vinegars like: olive oil, sesame seed oil, balsamico vinegar\n- Dried herbs like thyme, bay leaves, cumin, coriander, oregano, paprika, basil etc (but not fresh herbs)\n- Seeds\n- Color\n- Starch\n- \"Soltørrede tomater\" (in Danish)\n\nDo however detail in the response when you decided to omit certain ingredients.\n\n# Mealplan\nAdd the following to the shopping list:\n- 3X apple or orange juice (not from concentrate)\n- \"Rugbrød\"\n- Cheese\n- \"Spegepølse\"\n- \"Leverpostej\"\n\nAlso add the following items from the mealplan (in JSON):\n```json\n{{ JSON.stringify($('Meal Plan Generator Agent').item.json.output.mealplan) }}\n```"
          },
          "matchingColumns": [
            "prompt"
          ],
          "schema": [
            {
              "id": "prompt",
              "displayName": "prompt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        2784,
        2032
      ],
      "id": "e2173908-0426-48a9-ae78-8199f4c1895a",
      "name": "Add to shopping list"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ JSON.stringify($json.output) }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are an agent that generates HTML email content for the given meal plan you receive from the user.\n\nFor each recipe, display the following details (in the given order).\n\n1. The title of the recipe. This needs to be in quite large font size. It needs to function as a link that points to the recipe URL. This should be center-aligned, and a clear color.\n2. The days the recipe is for. This should be center-aligned.\n3. An image of the recipe. It also needs to function as a link that points to the recipe URL. This should be center-aligned.\n4. A list of meat and dairy ingredients that need preparation. For instance, if something says \"chopped in small pieces\" or something similar, then that needs to be added to this list. This needs to have a title that is left-aligned and in a white, slightly larger font.\n5. A list of vegetable and fruit ingredients that need preparation. For instance, if something says \"slices in fine slices\" or something similar, then that needs to be added to this list. This should not include items from step 4. This needs to have a title that is left-aligned and in a clear color and slightly larger font.\n6. A list of all other ingredients needed in the recipe that are not of steps 4 and 5. This needs to have a title that is left-aligned and in a clear color and slightly larger font. However, include also what the purpose/intent of this ingredient is - for instance \"(for serving)\" or \"(for the sauce)\".\n7. List the directions for the ingredients, in bullet and sub-bullet form. This needs to have a title that is left-aligned and in a clear color and slightly larger font.\n\nPut some vertical margin or padding between each of the details provided, so that it is easier to read. Also put some vertical margin or padding between list items, but less than the margin or padding between each detail.\n\nFor text colors, pick a color scheme in a way that respects both light and dark theme in email clients.\n\nSome recipes may actually include several sub-recipes. For instance, for a wok dish, the recipe might include both the ingredients needed for some wok sauce, and the wok ingredients themselves. In this case, you need to include a color legend.\n\nEverything needs to be in Danish.\n\n# Notifying the user of ingredients to save for later\nFor each of the ingredients listed, if only some quantity that ingredient is used on that day (and the other recipes for later days include some other quantities of the same ingredients), write in parentheses how many grams to save for later after the ingredient and quantity. For instance, if the recipe for Monday and Tuesday contains 200 grams of squash and a later recipe uses 300 grams of squash, then list the 200 grams of squash as \"200 g squash (save 300 g)\" instead of just \"200 g squash\", but in Danish. Don't include which day and what recipe to save for. This added text needs to be 50% transparent, and have a slightly smaller font. All of this is very important, and must be done for all ingredients listed (as described in the details listed above). Even if the quantity type is different, or the type of preparation for that ingredient is different. Only add the \"save X g\" text once for each ingredient. Don't include the text is the quantity to save is 0. This also goes for if different quantities is used twice in the same recipe.\n\n# Ingredient similarity\nBe careful about treating two ingredients the same that are not the same. For example, \"hvidløg\" and \"løg\" are two different ingredients.\n\n# Formatting\nThe HTML needs to be compatible with most email clients. All lists and sub-lists must have styling attached that will left-align the text within it.\n\n## Good example\nThis is a good example, because it contains just HTML, nothing else: <html><body>foo</body></html>\n\n## Bad example\nThis is a Bad example, because it wraps the HTML in markdown tags: \n```html\n<html><body>foo</body></html>\n```"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        1840,
        2160
      ],
      "id": "0b08b618-4d33-4ead-9bbb-3b8fc11e90be",
      "name": "Generate HTML email"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://www.valdemarsro.dk/api/v2/recipes/page/0?api_key=YOUR_API_KEY",
        "options": {
          "pagination": {
            "pagination": {
              "paginationMode": "responseContainsNextURL",
              "nextURL": "={{ $response.body.pagination.urls.next ? \"https://www.valdemarsro.dk\" + $response.body.pagination.urls.next + \"?api_key=YOUR_API_KEY\" : undefined }}",
              "paginationCompleteWhen": "other",
              "completeExpression": "={{ $response.body.pagination.page === $response.body.pagination.max_pages }}",
              "requestInterval": 1000
            }
          },
          "timeout": 10000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1552,
        1648
      ],
      "id": "5cee389f-7c01-4ddb-98f1-e6ae5517ae12",
      "name": "Fetch single Valdemarsro recipe page",
      "retryOnFail": true
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "=# {{ $('Split Out').item.json.title }}\n\n## Description\n{{ $('Split Out').item.json.description }}\n\n## Directions\n{{ $('Split Out').item.json.directions }}\n\n## Categories\n- {{ $('Split Out').item.json.categories.map(x => x.name).join('\\n- ') }}\n\n## Ingredients\n- {{ $('Split Out').item.json.ingredients.filter(x => x.ingrediens?.name).map(x => (x.maengde || \"\") + \" \" + (x.maengde ? x.enhed : \"\") + \" \" + x.ingrediens?.name + \" \" + x.tekst).map(x => x.trim()).join('\\n- ') }}",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "id",
                "value": "={{ $('Split Out').item.json.recipe_id }}"
              }
            ]
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        2256,
        1808
      ],
      "id": "79a6d447-faa6-482f-ab47-d77f6660e2a2",
      "name": "Default Data Loader"
    },
    {
      "parameters": {
        "options": {
          "splitCode": "markdown"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        2272,
        1968
      ],
      "id": "4dfbc618-c4e1-40db-9186-6f716ab02a93",
      "name": "Recursive Character Text Splitter"
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": "\"n8n\".\"cooking-recipe-embeddings\"",
        "embeddingBatchSize": 100,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePGVector",
      "typeVersion": 1.1,
      "position": [
        2272,
        1632
      ],
      "id": "2d148405-d343-49e2-abc3-fb1eac196b21",
      "name": "Postgres PGVector Store",
      "credentials": {
        "postgres": {
          "id": "POSTGRES_CREDENTIAL_ID",
          "name": "Postgres account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "months",
              "monthsInterval": 3
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        1040,
        1536
      ],
      "id": "645c1c25-917f-46a6-8d6e-ffd53d767cc3",
      "name": "Rebuild recipes list quarterly"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "value": "n8n",
          "mode": "list",
          "cachedResultName": "n8n"
        },
        "table": {
          "__rl": true,
          "value": "cooking-recipes",
          "mode": "list",
          "cachedResultName": "cooking-recipes"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "categories": "={{ $json.categories.map(x => x.name) }}",
            "id": "={{ $json.recipe_id }}",
            "title": "={{ $json.title }}",
            "description": "={{ $json.description }}",
            "directions": "={{ $json.directions }}",
            "ingredients": "={{ $json.ingredients.filter(x => x.ingrediens?.name).map(x => (x.maengde || \"\") + \" \" + (x.maengde ? x.enhed : \"\") + \" \" + x.ingrediens?.name + \" \" + x.tekst).map(x => x.trim()) }}",
            "url": "={{ $json.url }}",
            "amount_of_people": "={{ $json.fields.personer_maengde }}",
            "preparation_time": "={{ $json.fields.tid }}",
            "image_url": "={{ $json.media }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": true,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "description",
              "displayName": "description",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "directions",
              "displayName": "directions",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "categories",
              "displayName": "categories",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "array",
              "canBeUsedToMatch": true
            },
            {
              "id": "ingredients",
              "displayName": "ingredients",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "array",
              "canBeUsedToMatch": true
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "preparation_time",
              "displayName": "preparation_time",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true
            },
            {
              "id": "amount_of_people",
              "displayName": "amount_of_people",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true
            },
            {
              "id": "image_url",
              "displayName": "image_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2272,
        1456
      ],
      "id": "1e2a4dcf-e031-4ff7-80f3-66fc7f34abca",
      "name": "Insert recipes",
      "credentials": {
        "postgres": {
          "id": "POSTGRES_CREDENTIAL_ID",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "deleteTable",
        "schema": {
          "__rl": true,
          "value": "n8n",
          "mode": "list",
          "cachedResultName": "n8n"
        },
        "table": {
          "__rl": true,
          "value": "cooking-recipe-embeddings",
          "mode": "list",
          "cachedResultName": "cooking-recipe-embeddings"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1328,
        1472
      ],
      "id": "11aa6f2d-9535-4b7a-a6dd-e63011809508",
      "name": "Clear existing embeddings",
      "credentials": {
        "postgres": {
          "id": "POSTGRES_CREDENTIAL_ID",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "deleteTable",
        "schema": {
          "__rl": true,
          "value": "n8n",
          "mode": "list",
          "cachedResultName": "n8n"
        },
        "table": {
          "__rl": true,
          "value": "cooking-recipes",
          "mode": "list",
          "cachedResultName": "cooking-recipes"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1328,
        1280
      ],
      "id": "dbac5632-2956-4b7a-90f8-2e953f9ee472",
      "name": "Clear existing recipes",
      "credentials": {
        "postgres": {
          "id": "POSTGRES_CREDENTIAL_ID",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "fieldToSplitOut": "data",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1760,
        1552
      ],
      "id": "0fd1639f-7589-49a8-86f5-910072c5209f",
      "name": "Split Out"
    },
    {
      "parameters": {
        "compare": "selectedFields",
        "fieldsToCompare": "recipe_id",
        "options": {}
      },
      "type": "n8n-nodes-base.removeDuplicates",
      "typeVersion": 2,
      "position": [
        1984,
        1552
      ],
      "id": "d627a43f-404a-4fb1-9649-be325281fc55",
      "name": "Remove Duplicates"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": []
        },
        "includeOtherFields": true,
        "include": "except",
        "excludeFields": "categories, amount_of_people.maengde, amount_of_people.note, image_url, url, description, directions",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        448,
        1888
      ],
      "id": "a730311f-03e0-41a3-8b05-e56815ae20f6",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "value": "n8n",
          "mode": "list",
          "cachedResultName": "n8n"
        },
        "table": {
          "__rl": true,
          "value": "cooking-recipes",
          "mode": "list",
          "cachedResultName": "cooking-recipes"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        480,
        1456
      ],
      "id": "0bcf483f-5f90-459e-98be-a592d9e37d07",
      "name": "Get recipe details",
      "credentials": {
        "postgres": {
          "id": "POSTGRES_CREDENTIAL_ID",
          "name": "Postgres account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "look_for_cooking_recipes",
        "toolDescription": "Look for cooking recipes",
        "tableName": "\"n8n\".\"cooking-recipe-embeddings\"",
        "topK": 25,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePGVector",
      "typeVersion": 1.1,
      "position": [
        640,
        1440
      ],
      "id": "974afc04-1f4d-481a-842c-47e76b7631be",
      "name": "Find cooking recipe IDs",
      "credentials": {
        "postgres": {
          "id": "POSTGRES_CREDENTIAL_ID",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "toRecipients": "EMAIL_ADDRESS_1, EMAIL_ADDRESS_2",
        "subject": "Madplanen er nu lagt ind i Bilka To Go",
        "bodyContent": "=Husk at gå ind i Bilka To Go app'en og gennemfør bestillingen for at have ordren klar til afhentning dagen efter.\n\nRespons fra AI agenten: {{ $json.output.response }}",
        "additionalFields": {
          "bodyContentType": "html"
        }
      },
      "type": "n8n-nodes-base.microsoftOutlook",
      "typeVersion": 2,
      "position": [
        3248,
        2192
      ],
      "id": "b40155f8-4f04-4878-a28b-0fbb4feb0444",
      "name": "Send notification",
      "webhookId": "WEBHOOK_ID_PLACEHOLDER",
      "credentials": {
        "microsoftOutlookOAuth2Api": {
          "id": "OUTLOOK_CREDENTIAL_ID",
          "name": "Microsoft Outlook account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM n8n.\"cooking-recipes\" WHERE id IN ({{ $json.mealplan.map(id => `'${id}'`).join(',') }})",
        "options": {
          "queryReplacement": "={{ $json.mealplan.join(', ') }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1008,
        2160
      ],
      "id": "69c1d90c-5030-4fc9-8d18-a5f98be12f7a",
      "name": "Get extra recipe details",
      "credentials": {
        "postgres": {
          "id": "POSTGRES_CREDENTIAL_ID",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# Recipes for the week (in JSON)\n```json\n{{ JSON.stringify($json.data) }}\n```",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a meal planner agent that will be given some recipes in JSON format. Your job is to make a meal-plan out of it for a full week.\n\nEach recipe should have enough ingredient quantities for 3 days for 2 people, and there are 2 recipes (so 6 days in total). This also means that the quantities for each recipe should be scaled up to 6 people to match the 3 days (2 people * 3 days = 6).\n\nDecide the order of the recipes for the week. Consider that some ingredients expire faster (see Expiry). Faster expiring ingredients should be used first.\n\n# Response format\nYour response needs to follow this JSON schema:\n\n```json\n{\n  \"type\": \"object\",\n  \"required\": [\"mealplan\"],\n  \"properties\": {\n    \"mealplan\": {\n      \"type\": \"array\",\n      \"minItems\": 1,\n      \"items\": {\n        \"type\": \"object\",\n        \"required\": [\"days\", \"recipe\"],\n        \"properties\": {\n          \"days\": {\n            \"type\": \"array\",\n            \"description\": \"The weekday names in Danish that share the same recipe\",\n            \"items\": { \"type\": \"string\" }\n          },\n          \"recipe\": {\n            \"description\": \"Recipe details\",\n            \"oneOf\": [\n              { \"type\": \"null\" },\n              {\n                \"type\": \"object\",\n                \"required\": [\"title\", \"ingredients\", \"image_url\", \"url\", \"directions\"],\n                \"properties\": {\n                  \"title\": {\n                    \"type\": \"string\",\n                    \"minLength\": 1\n                  },\n                  \"ingredients\": {\n                    \"type\": \"array\",\n                    \"items\": { \"type\": \"string\" },\n                    \"minItems\": 1\n                  },\n                  \"directions\": {\n                    \"type\": \"array\",\n                    \"items\": { \"type\": \"string\" },\n                    \"minItems\": 1\n                  },\n                  \"image_url\": {\n                    \"type\": \"string\",\n                    \"format\": \"uri\"\n                  },\n                  \"url\": {\n                    \"type\": \"string\",\n                    \"format\": \"uri\"\n                  }\n                },\n                \"additionalProperties\": false\n              }\n            ]\n          }\n        },\n        \"additionalProperties\": false\n      }\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n# Expiry\nThe following is an expiry list of expiry speeds, from fastest expiry to slowest.\n\n1. Meat\n2. Milk\n3. Eggs\n4. Fresh herbs\n\nThere may be more - try to use common sense here, and make best guess assumptions."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        1440,
        2160
      ],
      "id": "79ecc549-20ab-4903-9cbd-bc242c0a29a8",
      "name": "Meal Plan Generator Agent"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1216,
        2160
      ],
      "id": "c8464c8b-d32a-4d9a-b74a-0cc865e33fa4",
      "name": "Combine to list"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"required\": [\"mealplan\"],\n  \"properties\": {\n    \"mealplan\": {\n      \"type\": \"array\",\n      \"minItems\": 1,\n      \"items\": {\n        \"type\": \"object\",\n        \"required\": [\"days\", \"recipe\"],\n        \"properties\": {\n          \"days\": {\n            \"type\": \"array\",\n            \"description\": \"The weekday names in Danish that share the same recipe\",\n            \"items\": { \"type\": \"string\" }\n          },\n          \"recipe\": {\n            \"description\": \"Recipe details\",\n            \"oneOf\": [\n              { \"type\": \"null\" },\n              {\n                \"type\": \"object\",\n                \"required\": [\"title\", \"ingredients\", \"image_url\", \"url\", \"directions\"],\n                \"properties\": {\n                  \"title\": {\n                    \"type\": \"string\",\n                    \"minLength\": 1\n                  },\n                  \"ingredients\": {\n                    \"type\": \"array\",\n                    \"items\": { \"type\": \"string\" },\n                    \"minItems\": 1\n                  },\n                  \"directions\": {\n                    \"type\": \"array\",\n                    \"items\": { \"type\": \"string\" },\n                    \"minItems\": 1\n                  },\n                  \"image_url\": {\n                    \"type\": \"string\",\n                    \"format\": \"uri\"\n                  },\n                  \"url\": {\n                    \"type\": \"string\",\n                    \"format\": \"uri\"\n                  }\n                },\n                \"additionalProperties\": false\n              }\n            ]\n          }\n        },\n        \"additionalProperties\": false\n      }\n    }\n  },\n  \"additionalProperties\": false\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        1616,
        2368
      ],
      "id": "7ac56f67-f617-493d-9731-386b1f9c2917",
      "name": "Mealplan as JSON"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1616,
        2672
      ],
      "id": "d02c794f-a5f5-4096-8577-e04c2a23b9be",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "OPENAI_CREDENTIAL_ID",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE n8n.\"cooking-recipes\" SET last_used_in_mealplan = NOW() WHERE id IN ({{ $('Remove markdown').item.json.mealplan.map(id => `'${id}'`).join(',') }})",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        3248,
        2416
      ],
      "id": "559bb5e2-2fd7-4f4e-a6ed-fda799a7b6f7",
      "name": "Mark recipes as used",
      "credentials": {
        "postgres": {
          "id": "POSTGRES_CREDENTIAL_ID",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "inputText": "={{ JSON.stringify($json.output) }}",
        "options": {
          "categories": "Succeeded, Failed",
          "systemPromptTemplate": "You are highly intelligent and accurate sentiment analyzer. Analyze the sentiment of the provided text. Categorize it into one of the following: {categories}. Use the provided formatting instructions.",
          "enableAutoFixing": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.sentimentAnalysis",
      "typeVersion": 1.1,
      "position": [
        2784,
        2288
      ],
      "id": "44a2bf31-b99f-4c88-895e-2eca3fa52ade",
      "name": "Did it succeed?",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "maxTries": 5
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        800,
        2656
      ],
      "id": "70b04b3a-34f5-4082-8977-ebc61d098f62",
      "name": "Gemini 2.5 Flash",
      "credentials": {
        "googlePalmApi": {
          "id": "GOOGLE_PALM_CREDENTIAL_ID",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# Original prompt (in Danish)\nUndgå supper hvis de er \"spøjse\" (f.eks. \"burgersuppe\", \"tacosuppe\", \"lasagnesuppe\" eller andre mærkelige supper).\n\n{{ $json.prompt ?? '# Adjustments to previous meal plan\\nThere are no adjustments to the previous mealplan, so just refer to the original prompt.' }}",
        "hasOutputParser": true,
        "needsFallback": true,
        "options": {
          "systemMessage": "=You are a meal planner agent that will be given a lot of recipes in JSON format, as well as a human user prompt. \n\nYour job is to make a meal-plan with 2 meals (unless instructed otherwise by the user).\n\n# Ranking \nYou get bonus points if you follow certain criteria. Try to get as many bonus points as possible. \n\n- **Recipes that share the same ingredients:** 2 point per ingredient shared \n- **Short preparation time:** 1 point per 15 minutes saved compared to a 4 hour preparation time. \n- **Healthy:** 5 points if the recipe is healthy. \n\n# Adjustments in user prompt to original prompt\nIn the user's prompt, if there are adjustments made that contradict what you are instructed in this system prompt or the original prompt, listen to the user's prompt instead. \n\n# Response schema\nFollow the following response schema:\n\n{\n  \"type\": \"object\",\n  \"required\": [\"mealplan\"],\n  \"properties\": {\n    \"mealplan\": {\n      \"type\": \"array\",\n      \"minItems\": 1,\n      \"items\": {\n        \"type\": \"number\",\n        \"description\": \"The IDs of the recipes for the mealplan\"\n      }\n    }\n  },\n  \"additionalProperties\": false\n}\n\n# All recipes Here are all the recipes:\n```json\n{{ JSON.stringify($json.data) }}\n```"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        272,
        2160
      ],
      "id": "d410b712-d67b-4c89-ab81-33ec0ee84b3e",
      "name": "Meal Plan Recipe Selector Agent",
      "retryOnFail": false,
      "maxTries": 5,
      "waitBetweenTries": 5000
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {
          "maxOutputTokens": 1000000
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        864,
        2800
      ],
      "id": "bb98c571-a219-4153-80c8-79e957ece6c9",
      "name": "Gemini 2.5 Pro",
      "credentials": {
        "googlePalmApi": {
          "id": "GOOGLE_PALM_CREDENTIAL_ID",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const prevNodeName = $prevNode?.name ?? 'Unknown';\nconst output = $input.first()?.json?.output ?? '';\n\nif (!output) {\n  throw new Error(`No input data found from previous node ${prevNodeName}`);\n}\n\nconst match = output.match(/```(?:[a-zA-Z]+)?\\n([\\s\\S]*?)\\n```/);\nconst jsonString = match ? match[1].trim() : output.trim();\n\n// Clean the common LLM error of escaping single quotes\nconst cleanedJsonString = jsonString.replace(/\\\\'/g, \"'\");\n\ntry {\n  const parsedJson = JSON.parse(cleanedJsonString);\n  return [{ json: parsedJson }];\n} catch (error) {\n  throw new Error(\n    `Failed to parse output as JSON from previous node ${prevNodeName}: ${error.message}`,\n    {\n      cause: {\n        original_text: jsonString,\n      },\n    },\n  );\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        688,
        2160
      ],
      "id": "84378cbb-5115-4a10-8bb7-a27c5c214ef5",
      "name": "Remove markdown"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-lite",
        "options": {
          "maxOutputTokens": 1000000
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        976,
        2656
      ],
      "id": "984cbb2e-112e-4969-b168-f432e44cf2bf",
      "name": "Gemini 2.5 Flash Lite",
      "credentials": {
        "googlePalmApi": {
          "id": "GOOGLE_PALM_CREDENTIAL_ID",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b60a12bd-0a6b-44da-8dfd-f10d55a11836",
              "leftValue": "={{ $json.categories }}",
              "rightValue": "Aftensmad",
              "operator": {
                "type": "array",
                "operation": "contains",
                "rightType": "any"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        208,
        1888
      ],
      "id": "e242e604-48f1-4e92-b894-e95587ed670f",
      "name": "Filter"
    }
  ],
  "pinData": {
    "When clicking ‘Test workflow’": [
      {
        "json": {
          "limit": 10
        }
      }
    ],
    "When Executed by Another Workflow": [
      {
        "json": {
          "prompt": "Find a simple and quick recipe for four people."
        }
      }
    ],
    "Rebuild recipes list quarterly": [
      {
        "json": {
          "timestamp": "2025-08-19T08:25:09.352+02:00",
          "Readable date": "August 19th 2025, 8:25:09 am",
          "Readable time": "8:25:09 am",
          "Day of week": "Tuesday",
          "Year": "2025",
          "Month": "August",
          "Day of month": "19",
          "Hour": "08",
          "Minute": "25",
          "Second": "09",
          "Timezone": "Europe/Berlin (UTC+02:00)"
        }
      }
    ],
    "Create meal plan weekly": [
      {
        "json": {
          "timestamp": "2025-07-13T06:00:57.512+02:00",
          "Readable date": "July 13th 2025, 6:00:57 am",
          "Readable time": "6:00:57 am",
          "Day of week": "Sunday",
          "Year": "2025",
          "Month": "July",
          "Day of month": "13",
          "Hour": "06",
          "Minute": "00",
          "Second": "57",
          "Timezone": "Europe/Berlin (UTC+02:00)"
        }
      }
    ]
  },
  "connections": {
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Rename field",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Window Buffer Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Rename field": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Get all recipes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Find cooking recipe IDs",
            "type": "ai_embedding",
            "index": 0
          },
          {
            "node": "Postgres PGVector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Create meal plan weekly": {
      "main": [
        [
          {
            "node": "Get all recipes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get all recipes": {
      "main": [
        [
          {
            "node": "Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Meal Plan Recipe Selector Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send proposal": {
      "main": [
        [
          {
            "node": "Is OK?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is OK?": {
      "main": [
        [
          {
            "node": "Add to shopping list",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Redirect adjustments prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redirect adjustments prompt": {
      "main": [
        [
          {
            "node": "Meal Plan Recipe Selector Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate HTML email": {
      "main": [
        [
          {
            "node": "Send proposal",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch single Valdemarsro recipe page": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Postgres PGVector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Postgres PGVector Store": {
      "main": [
        []
      ]
    },
    "Rebuild recipes list quarterly": {
      "main": [
        [
          {
            "node": "Clear existing embeddings",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch single Valdemarsro recipe page",
            "type": "main",
            "index": 0
          },
          {
            "node": "Clear existing recipes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert recipes": {
      "main": [
        []
      ]
    },
    "Clear existing embeddings": {
      "main": [
        []
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Remove Duplicates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove Duplicates": {
      "main": [
        [
          {
            "node": "Insert recipes",
            "type": "main",
            "index": 0
          },
          {
            "node": "Postgres PGVector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get recipe details": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Find cooking recipe IDs": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Add to shopping list": {
      "main": [
        [
          {
            "node": "Did it succeed?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get extra recipe details": {
      "main": [
        [
          {
            "node": "Combine to list",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Meal Plan Generator Agent": {
      "main": [
        [
          {
            "node": "Generate HTML email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine to list": {
      "main": [
        [
          {
            "node": "Meal Plan Generator Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mealplan as JSON": {
      "ai_outputParser": [
        [
          {
            "node": "Meal Plan Generator Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        []
      ]
    },
    "Did it succeed?": {
      "main": [
        [
          {
            "node": "Mark recipes as used",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send notification",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini 2.5 Flash": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Did it succeed?",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Meal Plan Recipe Selector Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Meal Plan Generator Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Generate HTML email",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Meal Plan Recipe Selector Agent": {
      "main": [
        [
          {
            "node": "Remove markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini 2.5 Pro": {
      "ai_languageModel": [
        []
      ]
    },
    "Remove markdown": {
      "main": [
        [
          {
            "node": "Get extra recipe details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini 2.5 Flash Lite": {
      "ai_languageModel": [
        [
          {
            "node": "Meal Plan Recipe Selector Agent",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "Filter": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "saveExecutionProgress": true,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "VERSION_ID_PLACEHOLDER",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "INSTANCE_ID_PLACEHOLDER"
  },
  "id": "WORKFLOW_ID_PLACEHOLDER",
  "tags": []
}